#!/usr/bin/env node


// Activate debug
process.env.DEBUG = "*";

var fs = require('fs');
var express = require('../lib/lilbro');
var nomnom  = require('nomnom');
var debug   = require('debug')('server');

var root = __dirname + '/..';
var writerFiles = fs.readdirSync(__dirname + '/../lib/writers');
var writers = writerFiles.map( function(f) { return f.replace(/\.js$/, '') });


var opts = nomnom.opts({
	'png-bug': {
		full: 'png-bug',
		default: root + '/heatmap/track.png',
		help: 'path to the image file to return to clients',
		metavar: 'FILE'
	},
	'https-port': {
		full: 'https-port',
		default: false,
		help: 'port to listen for https connections',
		metavar: 'PORT'
	},
	'http-port': {
		full: 'http-port',
		default: 80,
		help: 'port to listen on',
		metavar: 'PORT'
	},
	'solr-host': {
		full: 'solr-host',
		default: (process.env.SOLR_HOST || 'pub.solr.misakai.com'),
		help: 'solr hostname',
		metavar: 'HOST'
	},
	'solr-port': {
		full: 'solr-port',
		default: 8990,
		help: 'solr port',
		metavar: 'PORT'
	},
	'client-js-path': {
		full: 'client-js-path',
		default: root + '/heatmap/js/',
		help: 'path to find client library sources',
		metavar: 'DIR'
	},
	'writer': {
		file: 'writer',
		default: 'solr',
		metavar: '[' + writers.join('|') + ']',
		choices: writers,
		help: 'method to use for writing events'
	},
	'output-file': {
		full: 'output-file',
		default: 'lilb.log',
		help: 'path to log to when writing events to file',
		metavar: 'FILE'
	}

}).parseArgs();

/*process.env.http_proxy = "www-proxy.scss.tcd.ie:8080";
require('global-tunnel').initialize({
  host: 'www-proxy.scss.tcd.ie',
  port: 8080
});*/

var app = express.createServer(opts);
var port = parseInt(process.env.HTTP_PORT || opts['http-port'] || 80);
debug("listening on http port %d", port);
app.listen(port);

